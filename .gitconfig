[user]
  name = Bernat Gabor
  email = bgabor8@bloomberg.net

[pager]
  color = true
[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = blue bold
  frag = yellow bold
  old = red bold
  new = green bold

[push]
  default = simple
[help]
  autocorrect = 0
[pull]
  rebase = true

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[advice]
  pushNonFastForward = false
  statusHints = false
  commitBeforeMerge = false
  resolveConflict = false
  implicitIdentity = false
  detachedHead = false

[core]
  whitespace = trailing-space,space-before-tab
  pager = less -FXR
  editor = vim -pc ':normal gg'
	excludesfile = /home/bernat/.gitignore

[diff]
  renames = copies
  algorithm = histogram
  mnemonicprefix = true
	tool = meld

[difftool]
  prompt = false

[rerere]
  enabled = true

[merge]
  istat = true

[alias]
  lc = "!git config -l --show-origin | less -FXR "
  a = add
  aa = add --all
  ae = add --edit
  ai = add --interactive
  amend = commit --amend -C HEAD
  ap = add --patch
  au = add --update
  authors = "!git log --pretty=format:%aN | sort | uniq -c | sort -rn"
  b = branch -vv
  br = branch -vv -a
  c = commit
  cl = clean -fxd
  clo = clone
  ca = commit --amend
  changes = diff --name-status -r
  check = diff --check
  cm = commit --message
  co = checkout
  gr = grep --full-name --heading --break
  conflicted = grep --name-only --full-name '<<<<<<< HEAD'
  cpc = cherry-pick
  create-branch = !sh -c 'git push origin HEAD:refs/heads/$1 && git fetch origin && git branch --track $1 origin/$1 && cd . && git checkout $1' -
  d = diff
  dc = diff --cached
  delete-branch = !sh -c 'git push origin :refs/heads/$1 && git remote prune origin && git branch -D $1' -
  div = divergence
  dt = difftool
  dm = difftool --dir-diff -t meld
  h = help
  irb = rebase --interactive
  l = "!git log --graph --pretty='tformat:%C(yellow)%h{%C(green)%ar{%C(bold blue)%an{%C(red)%d%C(reset) %s' -10 $*| column -t -s '{' | less -FXRS "
  latest = for-each-ref --count=10 --sort=-committerdate --format='%(committerdate:short) %(refname:short)'
  lg = log --graph --pretty=format:'%Cred%h%Creset %an -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
  ls-ignored = ls-files --exclude-standard --ignored --others
  m = merge -s recursive -X patience
  markdown = !BN=$(git name-rev --name-only HEAD) && git log --no-merges --grep=$BN --pretty=oneline | awk -F"$BN: " '{print \"-\", $NF}' | uniq
  mm = merge --no-ff
  merge-branch = !git checkout master && git merge @{-1}
  msg = commit --allow-empty -m
  news = log -p HEAD@{1}..HEAD@{0}
  p = cherry-pick -s
  pick = cherry-pick
  pr = pull --rebase
  pu = push
  puf = push -f
  prune-remotes = "!for remote in `git remote`; do git remote prune $remote; done"
  r = remote
  ra = !git log --graph --abbrev-commit --date=relative -20 --all --pretty='format:%C(yellow)%h%Creset -%C(red)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'
  rb = rebase
  rba = rebase --abort
  rbc = rebase --continue
  rbs = rebase --skip
  rh = reset --hard
  s = status --short --branch
  sl = shortlog
  sm = submodule
  sma = submodule add
  smu = submodule update --init
  st = stash
  stl = stash list
  stp = stash pop
  undo = reset --soft HEAD@{1}
  wd = diff --word-diff="color"
  wdc = diff --word-diff="color" --cached
  push = push --tags
  rv = remote -v
  fa = fetch --all --prune
  rbu = rebase upstream/master 
  psu = push --set-upstream

[tig]
  line-graphics = yes
  tab-size = 2  # Number of spaces per tab
  split-view-width=70%
  wrap-lines=true

[grep]
  lineNumber = true
  patternType = perl

[credential]
	helper = cache --timeout=100000
